name: Build and Push Docker Image

on:
  push:
    branches:
      - master
    paths:
      - Dockerfile
      - dotfiles/**
      - packages.txt
      - .github/workflows/docker-build.yml
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository, including submodules and tags
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to access Git tags
          submodules: recursive
          fetch-tags: true

      # Fetch all tags explicitly (optional, for debugging)
      - name: Fetch All Tags
        run: git fetch --tags

      # List all available tags (optional, for debugging)
      - name: List Git Tags
        run: git tag

      # Set up Docker Buildx (supports multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub or another registry
      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Latest Tag
        id: get_tag
        run: |
          # Get the latest tag by sorting tags in descending order
          latest_tag=$(git tag --sort=-v:refname | head -n 1 || echo "1.0.0")
          echo "Latest tag: $latest_tag"
          # Extract the major, minor, and patch numbers
          IFS='.' read -r major minor patch <<< "$latest_tag"
          # Increment the patch version
          new_tag="$major.$minor.$((patch + 1))"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
            
      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build \
            -t ${{ secrets.DOCKER_USERNAME }}/editor:${{ env.new_tag }} \
            -t ${{ secrets.DOCKER_USERNAME }}/editor:latest .

      # Push the Docker image to the registry
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/editor:${{ env.new_tag }}
          docker push ${{ secrets.DOCKER_USERNAME }}/editor:latest

      # Push the new Git tag
      - name: Push New Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git rev-parse "$new_tag" >/dev/null 2>&1; then
            echo "Tag $new_tag already exists. Skipping tag creation."
          else
            git tag $new_tag
            git push origin $new_tag
          fi
