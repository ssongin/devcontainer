name: Build and Push Docker Image

on:
  push:
    branches:
      - master
    paths:
      - Dockerfile
      - packages.txt
      - pip.txt
      - .github/workflows/docker-build.yml
  workflow_dispatch:

permissions:
  contents: write

jobs:
  validate-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Extract commit message
        id: commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Validate commit prefix
        run: |
          COMMIT_MSG="${{ steps.commit.outputs.message }}"
          echo "Commit message: $COMMIT_MSG"

          shopt -s nocasematch

          if [[ "$COMMIT_MSG" =~ ^merge ]]; then
            echo "ℹ️ Merge commit detected — skipping validation."
            exit 0
          fi

          if [[ "$COMMIT_MSG" =~ ^(epic|major|feat|fix|build|chore|perf|refactor|revert|style|cicd|docs|test)(\([^\)]*\))?: ]]; then
            echo "✅ Valid commit prefix"
          else
            echo "❌ Invalid commit prefix"
            exit 1
          fi

  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository, including submodules and tags
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to access Git tags
          fetch-tags: true

      - name: Skip version bump for docs/test/Merge
        if: startsWith(steps.commit.outputs.message, 'docs') || startsWith(steps.commit.outputs.message, 'test') || startsWith(steps.commit.outputs.message, 'Merge')
        run: echo "Skipping version bump and Docker image for docs/test/Merge commit" && exit 0

      - name: Get latest tag
        id: version
        run: |
          git fetch --tags
          latest=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          latest=${latest#v}
          echo "latest=$latest" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: semver
        run: |
          IFS='.' read -r major minor patch <<< "${{ steps.version.outputs.latest || '0.0.0' }}"
          prefix="${{ steps.commit.outputs.message }}"

          case "$prefix" in
            epic*|major*) major=$((major + 1)); minor=0; patch=0 ;;
            feat*) minor=$((minor + 1)); patch=0 ;;
            fix*|build*|chore*|perf*|refactor*|revert*|style*|cicd*) patch=$((patch + 1)) ;;
            docs*|test*|Merge*) echo "No version bump"; exit 0 ;;
            *) echo "Invalid commit prefix"; exit 1 ;;
          esac

          new_version="$major.$minor.$patch"
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Tag commit and push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ steps.semver.outputs.version }}
          git push origin ${{ steps.semver.outputs.version }}

      # Set up Docker Buildx (supports multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub or another registry
      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Latest Tag
        id: get_tag
        run: |
          # Get the latest tag by sorting tags in descending order
          latest_tag=$(git tag --sort=-v:refname | head -n 1 || echo "1.0.0")
          echo "Latest tag: $latest_tag"
          # Extract the major, minor, and patch numbers
          IFS='.' read -r major minor patch <<< "$latest_tag"
          # Increment the patch version
          new_tag="$major.$minor.$((patch + 1))"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}:${{ steps.semver.outputs.version }}
          docker build -t $IMAGE .
          docker push $IMAGE
